// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(uuid())
  name           String
  email          String    @unique
  password       String
  role           Role      @default(USER)
  phone          String?
  address        Address[]
  orders         Order[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Product {
  id               String            @id @default(uuid())
  name             String
  description      String
  price            Float
  images           String[]
  stock            Int
  category         Category          @relation(fields: [categoryId], references: [id])
  categoryId       String
  reviews          Review[]
  orderItems       OrderItem[]
  discount         Float?
  featured         Boolean           @default(false)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  image       String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Review {
  id        String   @id @default(uuid())
  rating    Int
  comment   String?
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  user      String   // User name or email
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id           String  @id @default(uuid())
  street       String
  city         String
  state        String
  zipCode      String
  country      String
  isDefault    Boolean @default(false)
  user         User    @relation(fields: [userId], references: [id])
  userId       String
  orders       Order[]
}

model Order {
  id              String      @id @default(uuid())
  user            User        @relation(fields: [userId], references: [id])
  userId          String
  orderItems      OrderItem[]
  total           Float
  status          OrderStatus @default(PENDING)
  paymentMethod   PaymentMethod
  paymentStatus   PaymentStatus @default(PENDING)
  paymentIntentId String?
  address         Address     @relation(fields: [addressId], references: [id])
  addressId       String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model OrderItem {
  id        String  @id @default(uuid())
  product   Product @relation(fields: [productId], references: [id])
  productId String
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  quantity  Int
  price     Float
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  STRIPE
  CASH_ON_DELIVERY
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
